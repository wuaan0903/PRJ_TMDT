<%- layout('../layouts/index') %>

<style>
    /* định dạng Header */
     .custom-header {
                background: #fff;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                padding: 20px;
                border-radius: 8px;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
            
        /* Tăng kích thước icon */
        .custom-header i {
            font-size: 24px;
            color: #fbc02d; /* Màu vàng giống vương miện */
        }
    /* Sidebar */
    .sidebar {
        background: #d9d9d9;
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        height: fit-content;
    }

    .list-group-item {
        
        font-size: 16px;
        padding: 12px 15px;
        display: flex;
        align-items: center;
        gap: 10px;
        color: #333;
        transition: all 0.3s ease-in-out;
        text-decoration: none;
        border-radius: 8px;
        background: #fff;
        
    }

    .list-group-item i {
        font-size: 18px;
    }

    /* Hover */
    .list-group-item:hover {
        background: #000;
        color: #fff !important;
        transform: translateY(-3px);
    }

    /* Active */
    .list-group-item.active {
        background: #000 !important;
        color: #fff !important;
    }

    /* Logout - Đăng xuất */
    .list-group-item.text-danger {
        font-weight: bold;
    }

    /* Hover riêng cho Đăng xuất */
    .list-group-item.text-danger:hover {
        background: #dc3545 !important;
        color: #fff !important;
    }

    .order-container {
        

        padding: 20px 40px;
        margin-bottom: 30px;
        border-radius: 10px;
        min-height: 442px;
        background: #d9d9d9;
    }
    .order-header {
        font-size: 30px;
        font-weight: 500;
        padding-top: 10px;
        margin-bottom: 20px;
    }
    .order-card {
        background: #212121;
        color: #fff;
        padding: 10px 24px;
        border-radius: 5px;
    }
    .order-item {
        background: #f1f1f1;
        padding: 15px;
        border-bottom: 1px solid #e0e0e0;
        
    }
    .btn-custom {
        background: #f1f1f1;
        color: rgb(0, 0, 0);
        border: 1px solid #000000;
        border-radius: 20px;
        font-size: 14px;
        font-weight: 600;
        padding: 8px 36px;
    }

    .btn-custom1 {
        background: #000;
        color: #fff;
        border: 1px solid #000000;
        border-radius: 20px;
        font-size: 14px;
        font-weight: 600;
        padding: 8px 36px;
    }
    .btn-custom:hover {
        background: #000;
        color: #fff;
    }
    .btn-custom1:hover {
        border: 1px solid #000000;
        background: #222222;
        color: #fff;
    }
    .order{
        margin-bottom: 20px;
    }

    .star-rating {
        font-size: 24px;
        color: #ddd;
        cursor: pointer;
    }
    .star-rating .fas.selected {
        color: #fbc02d;
    }

</style>

<!-- Bootstrap Grid Layout -->
<div class="container pt-5" style="
margin: 0;
margin-top: 60px;
max-width: 100%;
padding: 0 50px;
">
    <div class="row">
        <ul class="side-menu top">
        <div class="custom-header ">
            <!-- Bên trái -->
            <div id="nameKH" class="left">
                <h4>Hi, <span class="fw-bold"></span> <i class='bx bx-crown' ></i></h4>
            </div> 
        </div>
        </ul>
        <!-- Sidebar bên trái -->
        <div class="col-md-3">
            <div class="sidebar">
                <ul class="side-menu top list-unstyled">
                    <div class="row g-2" id="user-sidebar">
                        <div class="col-12">
                            <a href="/user/profile" class="list-group-item list-group-item-action rounded-3 d-flex align-items-center  w-100 " style="
                            font-size: 15px;
                            letter-spacing: -1px;
                            font-weight: 600;
                        ">
                                <i class="fas fa-user"></i> Thông tin tài khoản
                            </a>
                        </div>
                        <div class="col-12">
                            <a href="/user/orders" class="list-group-item list-group-item-action rounded-3 d-flex align-items-center w-100 text-white bg-dark" style="
                            font-size: 15px;
                            letter-spacing: -1px;
                            font-weight: 600;
                        ">
                                <i class="fas fa-shopping-bag"></i> Lịch sử đơn hàng
                            </a>
                        </div>
                        <div class="col-12">
                            <a href="/user/vouchers" class="list-group-item list-group-item-action rounded-3 d-flex align-items-center w-100" style="
                            font-size: 15px;
                            letter-spacing: -1px;
                            font-weight: 600;
                        ">
                                <i class="fas fa-gift"></i> Ví Voucher
                            </a>
                        </div>
                        <div class="col-12">
                            <a href="/user/address" class="list-group-item list-group-item-action rounded-3 d-flex align-items-center w-100" style="
                            font-size: 15px;
                            letter-spacing: -1px;
                            font-weight: 600;
                        ">
                                <i class="fas fa-map-marker-alt"></i> Sổ địa chỉ
                            </a>
                        </div>
                        
                        <div class="col-12">
                            <a href="/user/policies" class="list-group-item list-group-item-action rounded-3 d-flex align-items-center w-100" style="
                            font-size: 15px;
                            letter-spacing: -1px;
                            font-weight: 600;
                        ">
                                <i class="fas fa-question-circle"></i> Chính sách & Câu hỏi thường gặp
                            </a>
                        </div>
                        <div class="col-12">
                            <a href="/auth/logout" class="list-group-item list-group-item-action text-danger rounded-3 d-flex align-items-center w-100" style="
                            font-size: 15px;
                            letter-spacing: -1px;
                            font-weight: 600;
                        ">
                                <i class="fas fa-sign-out-alt"></i> Đăng xuất
                            </a>
                        </div>
                    </div>
                </ul>
            </div>
        </div>

            <!-- Nội dung bên phải -->
            <div class="col-md-9">

                <div class="container" style="
                padding: 0;
            ">
                    <div class="order-container">
                        <h2 class="order-header">Lịch sử đơn hàng</h2>
                        <p>Đơn hàng của bạn: <strong id="order-count">0 đơn hàng</strong></p>
                        <div class="order-container1">

                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>

<!-- Modal đánh giá sản phẩm -->
<div class="modal fade" id="reviewModal" tabindex="-1" aria-labelledby="reviewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content" style="
        transform: translateY(100px);
    ">
            <div class="modal-header">
                <h5 class="modal-title" id="reviewModalLabel">Đánh giá sản phẩm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="productReviews" class="mb-3">
                    <!-- Các trường đánh giá cho từng sản phẩm sẽ được điền vào đây -->
                </div>
                <button type="submit" class="btn btn-primary" style="background: #111111;border: none;width: 100%;font-size: 14px;font-weight: 500;" id="submitReviews">Hoàn thành</button>
            </div>
        </div>
    </div>
</div>

    <script>
        document.addEventListener("DOMContentLoaded", async function () {
            let userId;

            const statusMap = {
                'pending': 'Chờ xác nhận',
                'processing': 'Đang giao hàng',
                'completed': 'Hoàn thành',
                'cancelled': 'Đã hủy'
            };
    
            // Gọi API để lấy ID người dùng
            fetch('/auth/user')
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    } else {
                        // Redirect to login page if not logged in
                        window.location.href = '/login';
                        throw new Error('Not logged in');
                    }
                })
                .then(userData => {
                    userId = userData.user.user._id;
                    console.log('User ID:', userId);
                    const nameKH = document.getElementById('nameKH');
                nameKH.innerHTML = `
                <h4>Hi, <span class="fw-bold">${userData.user.user.username}</span> <i class='bx bx-crown' ></i></h4>
                `;
                    fetchOrders(userId);
                })
                .catch(error => {
                    console.error('Error fetching user ID:', error);
                });

                let productDetails1 = {};
    
                // Hàm để gọi API lấy danh sách đơn hàng
            async function fetchOrders(userId) {
                try {
                    const response = await fetch(`http://localhost:3000/api/orders/user/${userId}`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    const orders = await response.json();
                    const productDetails = await fetchProductDetails(orders);
                    productDetails1=productDetails;
                    // Sắp xếp danh sách đơn hàng theo ngày
                    orders.sort((a, b) => new Date(b.date) - new Date(a.date));
                    displayOrders(orders, productDetails);
                    displayOrderCount(orders.length);
                } catch (error) {
                    console.error('Error fetching orders:', error);
                }
            }
    
            // Hàm để gọi API lấy chi tiết sản phẩm
            async function fetchProductDetails(orders) {
                const productIds = orders.flatMap(order => order.products.map(product => product.productId));
                const uniqueProductIds = [...new Set(productIds)];
                const productDetails = await Promise.all(uniqueProductIds.map(async productId => {
                    const response = await fetch(`http://localhost:3002/api/products/${productId}`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                }));
                return productDetails.reduce((acc, product) => {
                    acc[product._id] = product;
                    return acc;
                }, {});
            }
    
            // Hàm để hiển thị số lượng đơn hàng
            function displayOrderCount(count) {
                const orderCountElement = document.getElementById('order-count');
                orderCountElement.textContent = `${count} đơn hàng`;
            }


                // Hàm để hiển thị danh sách đơn hàng
                function displayOrders(orders, productDetails) {
                    const orderContainer = document.querySelector('.order-container1');
                    orderContainer.innerHTML = '';

                    orders.forEach(order => {
                        const orderElement = document.createElement('div');
                        orderElement.className = 'order';
                        orderElement.innerHTML = `
                            <div class="order-card d-flex justify-content-between align-items-center">
                                <div>
                                    <strong>#${order._id}</strong>
                                    <p style="margin: 0;">${new Date(order.date).toLocaleDateString()}</p>
                                </div>
                                <button class="btn btn-light" style="
                                border-radius: 16px;
                                font-size: 12px;
                                font-weight: 700;
                                letter-spacing: -1px;
                            ">${statusMap[order.status] || 'Không xác định'}</button>
                            </div>
                            
                            ${order.products.map(product => {
                                const productDetail = productDetails[product.productId];
                                return `
                                <div class="order-item d-flex align-items-center">
                                    <img src="http://localhost:3002/api/products/thumbnail/${productDetail.thumbnail}" class="me-3" alt="Sản phẩm" style="
                                    width: 100px;
                                ">
                                    <div>
                                        <p style="
                                        font-size: 14px;
                                        letter-spacing: -1px;
                                    "><strong>${productDetail.name}</strong></p>
                                        <p style="
                                        font-size: 14px;
                                        font-weight: 500;
                                        letter-spacing: -1px;
                                        color: #626262;
                                        margin-bottom: 10px;
                                    ">Size : ${product.size}</p>
                                        <p style="
                                        font-size: 14px;
                                        font-weight: 500;
                                        letter-spacing: -1px;
                                        margin-bottom: 10px;
                                    ">x${product.quantity}</p>

                                    <p style="
                                        font-size: 14px;
                                        font-weight: 500;
                                        letter-spacing: -1px;
                                        margin-bottom: 10px;
                                        font-weight: 700;
                                    ">${productDetail.price.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}</p>
                                    </div>
                                    
                                </div>
                                `;
                            }).join('')}
                            
                            <div class="d-flex justify-content-between fw-bold" style="
                            padding: 10px 20px;
                            background: #f1f1f1;
                        ">
                        <div>
                            <a href="http://localhost:3000/user/orders/${order._id}" class="btn btn-custom">Chi tiết</a>
                            ${order.status !== 'completed' && order.status !== 'cancelled' && order.status !== 'processing' ? `<button id="cancellOrder" class="btn btn-custom1 cancellOrder" data-order-id="${order._id}">Hủy đơn</button>` : ''}
                            ${order.status === 'completed' && order.rating === false ? `<button id="reviewOrder" class="btn btn-custom1 reviewOrder" data-order-id="${order._id}">Đánh giá</button>` : ''}
                        </div>


                                
                                <span style="
                                align-content: center;
                                font-size: 18px;
                                font-weight: 600;
                            ">${order.totalAmount.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}</span>
                            </div>
                        `;
                        orderContainer.appendChild(orderElement);
                    });

                    // Thêm sự kiện click cho nút "Đánh giá"
                    document.querySelectorAll('.reviewOrder').forEach(button => {
                        button.addEventListener('click', function () {
                            const orderId = this.getAttribute('data-order-id');
                            const products = orders.find(order => order._id === orderId).products;
                            console.log(products);
                            showReviewModal(orderId, products);
                        });
                    });


                    document.querySelectorAll('.cancellOrder').forEach(button => {
                        button.addEventListener('click', async function () {
                            const orderId = this.getAttribute('data-order-id');
                            Swal.fire({
                                title: "Bạn có chắc muốn hủy đơn hàng này không?",
                                text: "Bạn sẽ không thể khôi phục lại đơn hàng sau khi đã hủy.",
                                icon: "warning",
                                showCancelButton: true,
                                confirmButtonColor: "#3085d6",
                                cancelButtonColor: "#d33",
                                confirmButtonText: "Yes"  
                            }).then(async (result) => { // Thêm async vào đây
                                if (result.isConfirmed) {
                                    try {
                                        // Gọi API để cập nhật trạng thái đơn hàng thành "cancelled"
                                        const response = await fetch(`/api/orders/${orderId}`, {
                                            method: 'PUT',
                                            headers: {
                                                'Content-Type': 'application/json',
                                            },
                                            body: JSON.stringify({ status: 'cancelled' }),
                                        });
                    
                                        if (!response.ok) {
                                            throw new Error(`HTTP error! Status: ${response.status}`);
                                        }
                    
                                        
                                        fetchOrders(userId); // Tải lại danh sách đơn hàng sau khi hủy thành công
                                    } catch (error) {
                                        console.error('Error cancelling order:', error);
                                        alert('Đã xảy ra lỗi khi hủy đơn hàng. Vui lòng thử lại sau.');
                                    }
                    
                                    Swal.fire({
                                        title: "Đã hủy đơn hàng!",
                                        text: "Đơn hàng của bạn đã được hủy thành công.",
                                        icon: "success"
                                    });
                                }
                            });
                        });
                    });
                    
            
                }


            // Hàm để hiển thị modal đánh giá
            function showReviewModal(orderId, products) {
                const reviewModal = new bootstrap.Modal(document.getElementById('reviewModal'));

                // Điền thông tin sản phẩm và các trường đánh giá vào modal
                const productReviews = document.getElementById('productReviews');
                productReviews.innerHTML = products.map((product, index) => {
                    // Lấy thông tin sản phẩm từ productDetails bằng productId
                    const productDetail = productDetails1[product.productId];
                
                    // Kiểm tra nếu sản phẩm tồn tại trong productDetails
                    if (!productDetail) return '';
                
                    return `
                        <div class="product-review mb-4">
                            <div class="d-flex align-items-center mb-3">
                                <img src="http://localhost:3002/api/products/thumbnail/${productDetail.thumbnail}" alt="Sản phẩm" style="width: 80px; margin-right: 20px;">
                                <div>
                                    <p style="font-size: 14px; font-weight: 600; margin: 0;">${productDetail.name}</p>
                                    <p style="font-size: 14px; font-weight: 500; color: #626262; margin: 0;">Size: ${product.size}</p>
                                    <p style="font-size: 14px; font-weight: 500; margin: 0;">x${product.quantity}</p>
                                    <p style="font-size: 14px; font-weight: 700; margin: 0;">${productDetail.price.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}</p>
                                </div>
                            </div>
                            <div class="mb-3 d-flex align-items-center"> 
                                <label for="rating${index}" class="form-label m-0 pe-5" style="
    font-size: 14px;
    font-weight: 500;
">Chất lượng sản phẩm</label>
                                <div id="rating${index}" class="star-rating">
                                    <i class="fas fa-star selected" data-value="1"></i>
                                    <i class="fas fa-star selected" data-value="2"></i>
                                    <i class="fas fa-star selected" data-value="3"></i>
                                    <i class="fas fa-star selected" data-value="4"></i>
                                    <i class="fas fa-star selected" data-value="5"></i>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="reviewContent${index}" class="form-label" style="
    font-size: 14px;
    font-weight: 500;
">Nội dung đánh giá</label>
                                <textarea class="form-control" style="
    font-size: 14px;
    font-weight: 500;
" id="reviewContent${index}" rows="3" required></textarea>
                            </div>
                            <div class="mb-3">
                                <label for="reviewImage${index}" class="form-label" style="
    font-size: 14px;
    font-weight: 500;
">Thêm ảnh sản phẩm</label>
                                <input class="form-control" style="
    font-size: 14px;
    font-weight: 500;
" type="file" id="reviewImage${index}" name="images" multiple accept="image/*">
                            </div>
                            <div class="mb-3">
                                <label for="reviewImage${index}" class="form-label"></label>
                                <img id="reviewImagePreview${index}" src="#" alt="Ảnh đánh giá" style="display: none; width: 100px; height: auto; margin-top: 10px;">
                            </div>
                        </div>
                    `;
                }).join('');
                
                reviewModal.show();

                // Xử lý sự kiện click vào sao để chọn đánh giá
                document.querySelectorAll('.star-rating .fas').forEach(star => {
                    star.addEventListener('click', function () {
                        const value = this.getAttribute('data-value');
                        const ratingId = this.parentElement.id;
                        document.querySelectorAll(`#${ratingId} .fas`).forEach(s => {
                            s.classList.remove('selected');
                            if (s.getAttribute('data-value') <= value) {
                                s.classList.add('selected');
                            }
                        });
                    });
                });

                async function uploadReviewImages(imageFiles) {
                    if (!imageFiles || imageFiles.length === 0) return;
                
                    const imageFormData = new FormData();
                    Array.from(imageFiles).forEach(file => imageFormData.append("images", file));
                
                    try {
                        const response = await fetch(`http://localhost:3002/api/reviewProduct/imageReview`, {
                            method: "POST",
                            body: imageFormData
                        });
                
                        const result = await response.json();
                        if (!response.ok) throw new Error(result.message);
                
                        console.log("Ảnh review đã được tải lên!", result.images);
                    } catch (error) {
                        console.error("Lỗi khi upload ảnh review:", error);
                    }
                }

                // Xử lý sự kiện submit form đánh giá
                document.getElementById('submitReviews').addEventListener('click', async function (event) {
                    event.preventDefault();
                
                    const reviews = await Promise.all(products.map(async (product, index) => {
                        const stars = document.querySelectorAll(`#rating${index} .fas.selected`);
                        const rating = stars.length > 0 ? stars[stars.length - 1].getAttribute('data-value') : 0;

                        const reviewContent = document.getElementById(`reviewContent${index}`).value;
                        const reviewImages = document.getElementById(`reviewImage${index}`).files; // Lấy danh sách ảnh
                        
                        // **📌 Gửi ảnh lên server trước khi tạo review**
                            let uploadedImages = [];
                            if (reviewImages.length > 0) {
                                const imageFormData = new FormData();
                                Array.from(reviewImages).forEach(file => imageFormData.append("images", file));

                                try {
                                    const imageResponse = await fetch("http://localhost:3002/api/reviewProduct/imageReview", {
                                        method: "POST",
                                        body: imageFormData
                                    });

                                    if (!imageResponse.ok) {
                                        throw new Error(`HTTP error! Status: ${imageResponse.status}`);
                                    }

                                    const imageData = await imageResponse.json();
                                    uploadedImages = imageData.images; // Danh sách ảnh từ server
                                } catch (error) {
                                    console.error("Error uploading images:", error);
                                }
                            }
                        
                        return {
                            product_id: product.productId,
                            user_id: userId,
                            comment: reviewContent,
                            rate: rating,
                            image_review: uploadedImages // Lưu danh sách ảnh vào review
                        };
                    }));
                
                    try {
                        for (const review of reviews) {
                            console.log('Review data:', review);
                            const response = await fetch(`/api/review/`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(review)
                            });
                
                            if (!response.ok) {
                                throw new Error(`HTTP error! Status: ${response.status}`);
                            }
                        }


                        // Gọi API để cập nhật order.rating thành true
                        const updateRatingResponse = await fetch(`/api/orders/rating/${orderId}`, {
                            method: 'PUT'
                        });

                        if (!updateRatingResponse.ok) {
                            throw new Error(`HTTP error! Status: ${updateRatingResponse.status}`);
                        }
                        
                
                        // Đóng modal sau khi đánh giá thành công
                        reviewModal.hide();
                        fetchOrders(userId);
                    } catch (error) {
                        console.error('Error submitting review:', error);
                    }
                });


            }
            
                // Xử lý sự kiện click vào sao để chọn đánh giá
            document.querySelectorAll('#rating .fas').forEach(star => {
                star.addEventListener('click', function () {
                    const value = this.getAttribute('data-value');
                    document.querySelectorAll('#rating .fas').forEach(s => {
                        s.classList.remove('selected');
                        if (s.getAttribute('data-value') <= value) {
                            s.classList.add('selected');
                        }
                    });
                });
            });


            // Gọi hàm fetchOrders khi trang được tải
            fetchOrders();


        });
    </script>