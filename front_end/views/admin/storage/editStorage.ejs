<%- layout('../layouts/index') %>

    <head>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    </head>

    <main>
        <div class="border rounded-4 bg-white">
            <div class="p-3 border-bottom">
                <h2 class="fs-4 m-0">Cập nhật kho hàng</h2>
            </div>
            <div class="p-3">
                <form accept-charset="UTF-8" id="form-add-product" method="post" enctype="multipart/form-data">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="exampleFormControlInput1" class="form-label">Tên sản phẩm</label>
                            <input type="hidden" name="productId" value="<%= productQuantity[0]?.product_id || '' %>">
                            <input type="text" class="form-control" id="exampleFormControlInput1"
                                placeholder="Tên sản phẩm" name="name" value="" readonly>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Thêm size mới</label>
                            <div class="d-flex gap-2">
                                <input type="hidden" name="product_id" id="productId"
                                    value="<%= productQuantity[0]?.product_id || '' %>">
                                <input type="text" class="form-control" id="newSize" placeholder="Nhập size mới"
                                    name="size">
                                <input type="number" class="form-control" id="newQuantity" placeholder="Nhập số lượng"
                                    name="quantity" min="0">
                                <button id="addSizeBtn" type="button" class="btn btn-success"
                                    style="white-space: nowrap;">Thêm mới</button>
                            </div>
                        </div>
                    </div>

                    <!-- Phần bảng danh sách -->
                    <div class="row">
                        <div class="col-12">
                            <label for="size" class="form-label">Danh sách Size và Số lượng</label>
                            <div class="table-responsive">
                                <table class="table table-bordered table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th style="width: 60px;">STT</th>
                                            <th style="width: 100px;">Size</th>
                                            <th style="width: 150px;">Số lượng</th>
                                            <th>Mô tả</th>
                                            <th style="width: 120px;" class="text-center">Hành động</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% if (productQuantity && productQuantity.length> 0) {
                                            // Define size order function
                                            function getSizeOrder(size) {
                                            // Common clothing sizes in order
                                            const sizeOrder = {
                                            'XS': 0,
                                            'S': 1,
                                            'M': 2,
                                            'L': 3,
                                            'XL': 4,
                                            '2XL': 5,
                                            'XXL': 5, // Alternative format
                                            '3XL': 6,
                                            'XXXL': 6, // Alternative format
                                            '4XL': 7,
                                            'XXXXL': 7, // Alternative format
                                            '5XL': 8,
                                            'XXXXXL': 8 // Alternative format
                                            };

                                            // Return the order if it exists, otherwise a high number
                                            return sizeOrder[size.toUpperCase()] !== undefined ?
                                            sizeOrder[size.toUpperCase()] : 999;
                                            }

                                            // Sort the productQuantity array by size order
                                            const sortedProductQuantity = [...productQuantity].sort((a, b) => {
                                            return getSizeOrder(a.size) - getSizeOrder(b.size);
                                            });

                                            sortedProductQuantity.forEach((item, index) => {
                                            %>
                                            <tr>
                                                <td>
                                                    <%= index + 1 %>
                                                </td>
                                                <td>
                                                    <input type="hidden" name="sizes[]" value="<%= item.size %>">
                                                    <%= item.size %>
                                                </td>
                                                <td>
                                                    <input type="number" class="form-control price" name="quantity[]"
                                                        placeholder="0" value="<%= item.quantity %>"
                                                        aria-label="Số lượng" min="0">
                                                </td>
                                                <td>
                                                    <span id="descQuantity-<%= index + 1 %>">Trong kho còn lại <b>
                                                            <%= item.quantity %>
                                                        </b> sản phẩm</span>
                                                </td>
                                                <td>
                                                    <div class="d-flex gap-2 justify-content-center action-buttons">
                                                        <button type="button" class="btn btn-success btn-sm btn-update-row"
                                                            data-size="<%= item.size %>"
                                                            data-row-index="<%= index + 1 %>"
                                                            title="Cập nhật">
                                                            <i class="fas fa-sync-alt me-1"></i>
                                                            Cập nhật
                                                        </button>
                                                        <button type="button" class="btn btn-danger btn-sm btn-icon btn-delete-row"
                                                            data-size="<%= item.size %>"
                                                            data-row-index="<%= index + 1 %>"
                                                            title="Xóa">
                                                            <i class="fas fa-trash-alt"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                            <% }); %>
                                                <% } else { %>
                                                    <tr>
                                                        <td colspan="5" class="text-center">Không có dữ liệu size cho
                                                            sản phẩm này</td>
                                                    </tr>
                                                    <% } %>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', async function () {
            const productId = document.querySelector('input[name="productId"]').value;
            const productNameInput = document.querySelector('input[name="name"]');
            try {
                const response = await fetch(`/api/product/${productId}`);
                if (response.ok) {
                    const data = await response.json();
                    productNameInput.value = data.name;
                } else {
                    console.error('Failed to fetch product name:', response.status, response.statusText);
                    productNameInput.value = "Failed to load product name";
                }

            } catch (error) {
                console.error('Error fetch product name:', error);
                productNameInput.value = "Failed to load product name";
            }
            const updateButtons = document.querySelectorAll('.btn-update-row');
            updateButtons.forEach(button => {
                button.addEventListener('click', async function () {
                    const size = this.getAttribute('data-size');
                    const rowIndex = this.getAttribute('data-row-index');
                    const quantityInput = document.querySelector(`tbody tr:nth-child(${rowIndex}) input[name="quantity[]"]`);
                    const quantity = quantityInput.value;

                    try {
                        const response = await fetch(`/api/product-quantity/${productId}`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                size: size,
                                quantity: quantity
                            }),
                        });
                        const data = await response.json();
                        if (response.ok) {
                            document.querySelector(`#descQuantity-${rowIndex} b`).textContent = quantity;
                            alert('Cập nhật số lượng thành công!');
                        } else {
                            console.error('Error updating quantity:', data.message || 'Failed to update product quantity');
                            alert('Failed to update quantity')
                        }
                    } catch (error) {
                        console.error('Error updating quantity:', error);
                        alert('An error occurred while updating product quantity.')
                    }
                });
            });
            const deleteButtons = document.querySelectorAll('.btn-delete-row');
            deleteButtons.forEach(button => {
                button.addEventListener('click', async function () {
                    if (!confirm('Bạn có chắc chắn muốn xóa size này không?')) {
                        return;
                    }

                    const size = this.getAttribute('data-size');
                    const rowIndex = this.getAttribute('data-row-index');
                    const row = this.closest('tr');

                    try {
                        const response = await fetch(`/api/product-quantity/${productId}`, {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                size: size
                            })
                        });

                        const result = await response.json();

                        if (response.ok) {
                            // Xóa hàng khỏi bảng
                            row.remove();
                            
                            // Kiểm tra nếu không còn size nào
                            const remainingRows = document.querySelectorAll('tbody tr');
                            if (remainingRows.length === 0) {
                                const tbody = document.querySelector('tbody');
                                tbody.innerHTML = `
                                    <tr>
                                        <td colspan="5" class="text-center">Không có dữ liệu size cho sản phẩm này</td>
                                    </tr>
                                `;
                            } else {
                                // Cập nhật lại STT cho các hàng còn lại
                                remainingRows.forEach((row, index) => {
                                    const sttCell = row.querySelector('td:first-child');
                                    if (sttCell) {
                                        sttCell.textContent = index + 1;
                                    }
                                });
                            }
                            
                            alert(result.message || 'Xóa size thành công!');
                        } else {
                            alert(result.message || 'Không thể xóa size! Vui lòng thử lại.');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('Đã xảy ra lỗi khi xóa size! Vui lòng thử lại sau.');
                    }
                });
            });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const addSizeBtn = document.getElementById('addSizeBtn');

            addSizeBtn.addEventListener('click', async function () {
                const productId = document.getElementById('productId').value;
                const newSize = document.getElementById('newSize').value;
                const newQuantity = document.getElementById('newQuantity').value;

                // Validate dữ liệu
                if (!productId || !newSize || !newQuantity) {
                    alert('Vui lòng nhập đầy đủ thông tin!');
                    return;
                }

                try {
                    console.log('Sending data:', { productId, size: newSize, quantity: newQuantity }); // Log để debug

                    const response = await fetch(`/api/product-quantity/${productId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            size: newSize,
                            quantity: parseInt(newQuantity)
                        })
                    });

                    const result = await response.json();
                    console.log('Response:', result); // Log để debug

                    if (response.ok) {
                        // Reload page to get sorted sizes
                        window.location.reload();
                    } else {
                        alert(result.message || 'Không thể thêm size mới!');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Đã xảy ra lỗi khi thêm size mới!');
                }
            });
        });
    </script>

    <style>
        .table-responsive {
            overflow-x: auto;
        }

        .form-control:focus {
            border-color: #198754;
            box-shadow: 0 0 0 0.25rem rgba(25, 135, 84, 0.25);
        }

        .btn-success {
            padding: 0.375rem 0.75rem;
        }

        .table td {
            vertical-align: middle;
        }

        .table input[type="number"] {
            max-width: 120px;
        }

        .row {
            align-items: flex-end;
        }

        @media (max-width: 768px) {
            .d-flex.gap-2 {
                flex-wrap: wrap;
            }

            .d-flex.gap-2 input,
            .d-flex.gap-2 button {
                width: 100%;
                margin-bottom: 0.5rem;
            }
        }

        .btn-danger {
            padding: 0.375rem 0.75rem;
        }

        .btn-delete-row {
            width: 40px;
            padding: 0.375rem;
        }

        .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
        }

        .btn-update-row, .btn-delete-row {
            min-width: 40px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.25rem;
        }

        .btn-delete-row {
            padding: 0.25rem 0.5rem;
        }

        .d-flex.gap-1 {
            gap: 0.25rem !important;
        }

        @media (max-width: 768px) {
            .btn-update-row, .btn-delete-row {
                width: auto;
                padding: 0.25rem 0.5rem;
            }
        }

        .action-buttons {
            white-space: nowrap;
        }

        .btn-update-row {
            padding: 0.25rem 0.75rem;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
            min-width: 100px;
            font-size: 0.875rem;
        }

        .btn-update-row:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.15);
        }

        .btn-icon {
            width: 32px;
            height: 32px;
            padding: 0;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 4px;
            transition: all 0.2s ease;
        }

        .btn-icon i {
            font-size: 14px;
        }

        .btn-icon:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.15);
        }

        .btn-success.btn-icon, .btn-success.btn-update-row {
            background-color: #28a745;
            border-color: #28a745;
        }

        .btn-danger.btn-icon {
            background-color: #dc3545;
            border-color: #dc3545;
        }

        .btn-success.btn-icon:hover, .btn-success.btn-update-row:hover {
            background-color: #218838;
            border-color: #1e7e34;
        }

        .btn-danger.btn-icon:hover {
            background-color: #c82333;
            border-color: #bd2130;
        }

        @media (max-width: 768px) {
            .action-buttons {
                gap: 0.5rem !important;
            }
            
            .btn-icon {
                width: 28px;
                height: 28px;
            }
            
            .btn-icon i {
                font-size: 12px;
            }

            .btn-update-row {
                min-width: auto;
                padding: 0.25rem 0.5rem;
            }
        }
    </style>