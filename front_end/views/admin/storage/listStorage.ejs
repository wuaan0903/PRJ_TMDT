<%- layout('../layouts/index') %>

<main>
    <div class="d-flex justify-content-between align-items-center mb-4" bis_skin_checked="1">
        <!-- Tìm kiếm đơn hàng -->
          <div class="input-group" style="width: 40%;">
            <span class="input-group-text" style="border-radius: 24px 0 0 24px; background: white; border-right: none;">
                <i class="bx bx-search-alt-2"></i>
            </span>
            <input type="text" id="searchOrderInput" class="form-control" placeholder="Tìm kiếm sản phẩm..." style="
                font-size: 16px;
                font-weight: 600;
                letter-spacing: -1px;
                border-radius: 0 24px 24px 0;
                line-height: 2;
                border-left: none;
                outline: none;
                box-shadow: none;
            ">
        </div>
    
        <div class="d-flex" bis_skin_checked="1">
          <!-- Dropdown Bộ sưu tập -->
          <select id="filterCollection" class="form-select rounded-pill fw-medium letter-spacing py-2 px-3" style="width: 200px; margin-right: 10px;">
              <option value="all">Tất cả Bộ sưu tập</option>
          </select>
      
          <!-- Dropdown Danh mục -->
          <select id="filterCategory" class="form-select rounded-pill fw-medium letter-spacing py-2 px-3" style="width: 250px;">
              <option value="all">Tất cả Danh mục</option>
          </select>
      </div>
    
    </div>
    <div class="border rounded-4 bg-white">
        <div class="p-3 border-bottom">
            <h2 class="fs-4 m-0">Kho hàng sản phẩm</h2>
        </div>
        <div class="table-data">
            <div class="order">
                <table class="myTable">
                    <thead>
                        <tr>
                            <th>Hình ảnh sản phẩm</th>
                            <th>Tên sản phẩm</th>
                            <th>Số lượng</th>
                            <th>Hành động</th>
                        </tr>
                    </thead>
                    <tbody id="productTableBody">
                        <!-- Product rows will be inserted here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</main>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const productTableBody = document.getElementById('productTableBody');
        const searchInput = document.getElementById('searchOrderInput');
        const filterCollection = document.getElementById('filterCollection');
        const filterCategory = document.getElementById('filterCategory');
    
        let allProducts = []; // Lưu trữ tất cả sản phẩm để tìm kiếm và lọc

        // Hàm lấy danh sách bộ sưu tập từ API
    async function fetchCollections() {
        try {
            const response = await fetch('/api/collections');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const collections = await response.json();

            // Thêm các tùy chọn vào dropdown Bộ sưu tập
            collections.forEach((collection) => {
                const option = document.createElement('option');
                option.value = collection._id; // Sử dụng ID của bộ sưu tập
                option.textContent = collection.name;
                filterCollection.appendChild(option);
            });
        } catch (error) {
            console.error('Failed to fetch collections:', error);
        }
    }

    // Hàm lấy danh sách danh mục theo bộ sưu tập từ API
    async function fetchCategoriesByCollection(collectionId) {
        try {
            const response = await fetch(`/api/categories?collectionId=${collectionId}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const categories = await response.json();

            // Xóa các tùy chọn cũ trong dropdown Danh mục
            filterCategory.innerHTML = '<option value="all">Tất cả Danh mục</option>';

            // Thêm các tùy chọn mới vào dropdown Danh mục
            categories.forEach((category) => {
                const option = document.createElement('option');
                option.value = category._id; // Sử dụng ID của danh mục
                option.textContent = category.name;
                filterCategory.appendChild(option);
            });
        } catch (error) {
            console.error('Failed to fetch categories:', error);
        }
    }

    // Lắng nghe sự kiện thay đổi trên dropdown Bộ sưu tập
    filterCollection.addEventListener('change', (event) => {
        const selectedCollectionId = event.target.value;

        if (selectedCollectionId === 'all') {
            // Nếu chọn "Tất cả Bộ sưu tập", hiển thị tất cả danh mục
            filterCategory.innerHTML = '<option value="all">Tất cả Danh mục</option>';
        } else {
            // Lấy danh sách danh mục theo bộ sưu tập đã chọn
            fetchCategoriesByCollection(selectedCollectionId);
        }
    });
    
    // Gọi hàm để lấy danh sách bộ sưu tập ban đầu
    fetchCollections();
    
        // Function to fetch products and render the table
        async function fetchProducts() {
            try {
                const response = await fetch('/api/products');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                let products = await response.json();

                // Fetch collection and category names for each product
                products = await Promise.all(
                  products.map(async (product) => {
                    try {
                      // const collectionResponse = await fetch(`/api/collection/${product.collection}`);
                      // const collectionData = await collectionResponse.json();
                      const test = product.categories;
                      const categoryResponse = await fetch(
                        `/api/category/${product.categories}`
                      );
                      const categoryName = product.categories.name;
        
                      const collectionResponse = await fetch(
                        `/api/collection/${product.categories.collection_id}`
                      );
                      const collectionData = await collectionResponse.json();
                      return {
                        ...product,
                        collectionName: collectionData.name,
                        categoryName: categoryName,
                      };
                    } catch (error) {
                      console.error("Error fetching collection or category:", error);
                      return {
                        ...product,
                        collectionName: "Unknown Collection",
                        categoryName: "Unknown Category",
                      };
                    }
                  })
                );
                allProducts = products; // Save all products for search and filter
        
                renderProductTable(products);
            } catch (error) {
                console.error('Failed to fetch products:', error);
                productTableBody.innerHTML = '<tr><td colspan="4">Failed to load products.</td></tr>';
            }
        }


         async function fetchProductQuantity(productId) {
            try {
                const response = await fetch(`/api/product-quantity/${productId}`);
                  if (response.ok) {
                    const quantityData = await response.json();
                    return quantityData.reduce((acc, cur) => acc + cur.quantity, 0);
                }
                 return null;
            } catch (error) {
                console.error(`Failed to fetch quantity for product ${productId}:`, error);
                return null;
            }
        }

        async function renderProductTable(products) {
            productTableBody.innerHTML = ''; // Clear existing rows

            for (const product of products) {
                try {
                   const quantity = await fetchProductQuantity(product._id)
                   const quantityDisplay = quantity != null ? quantity : 'N/A'
                const row = document.createElement('tr');
                row.innerHTML = `
                         <td><img class="imgProduct" style="width: 100px;height: 100px;" src="http://localhost:3002/api/products/thumbnail/${product.thumbnail}"></td>
                        <td>${product.name}</td>
                         <td>
                            <span class="quantity-display" id="quantity-${product._id}">${quantityDisplay}</span>
                        </td>
                       <td><a href="/admin/storage/edit/${product._id}" class="btn btn-primary edit-quantity-from-detail">Edit Quantity</a></td>
                    `;
                  productTableBody.appendChild(row);


                } catch (error) {
                    console.error(`Failed to fetch quantity for product ${product._id}:`, error);
                      const row = document.createElement('tr');
                      row.innerHTML = `
                         <td><img class="imgProduct" style="width: 100px;height: 100px;" src="http://localhost:3002/api/products/thumbnail/${product.thumbnail}"></td>
                        <td>${product.name}</td>
                         <td>
                            <span class="quantity-display" id="quantity-${product._id}">N/A</span>
                        </td>
                        <td><a href="/admin/storage/edit/${product._id}" class="btn btn-primary edit-quantity-from-detail">Edit Quantity</a></td>
                    `;
                    productTableBody.appendChild(row);
                }

            }
        }

        // Lắng nghe sự kiện thay đổi danh mục
filterCategory.addEventListener('change', filterAndSearchProducts);

// Hàm kết hợp tìm kiếm và lọc
function filterAndSearchProducts() {
    const searchQuery = searchInput.value.trim().toLowerCase();
    const selectedCollection = filterCollection.value;
    const selectedCategory = filterCategory.value;
    const selectedCollection1 = filterCollection.options[filterCollection.selectedIndex].text;
    const selectedCategory1 = filterCategory.options[filterCategory.selectedIndex].text;
    

    let filteredProducts = allProducts;

      // Lọc theo bộ sưu tập
  if (selectedCollection !== "all") {
    filteredProducts = filteredProducts.filter(
        (product) => product.collectionName === selectedCollection1
    );
}

// Lọc theo danh mục
if (selectedCategory !== "all") {
    filteredProducts = filteredProducts.filter(
        (product) => product.categoryName === selectedCategory1
    );
}

// Tìm kiếm theo tên
if (searchQuery) {
    filteredProducts = filteredProducts.filter((product) =>
        product.name.toLowerCase().includes(searchQuery)
    );
}

    renderProductTable(filteredProducts); // Hiển thị sản phẩm đã lọc và tìm kiếm
}

      // Lắng nghe sự kiện tìm kiếm
      searchInput.addEventListener("input", filterAndSearchProducts);

// Lắng nghe sự kiện thay đổi bộ sưu tập
filterCollection.addEventListener("change", filterAndSearchProducts);

// Lắng nghe sự kiện thay đổi danh mục
filterCategory.addEventListener("change", filterAndSearchProducts);


        // Initial fetch of products
        fetchProducts();
    });
</script>