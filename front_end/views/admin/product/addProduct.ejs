<%- layout('../layouts/index') %>

<main>
  <div class="border rounded-4 bg-white">
    <div class="p-3 border-bottom">
      <h2 class="fs-4 m-0">
      Thêm sản phẩm
      </h2>
    </div>
    <div class="p-3">
      <form id="form-add-product" enctype="multipart/form-data">
        <div class="row mb-3">
          <div class="col">
            <label for="name" class="form-label">Tên sản phẩm</label>
            <input type="text" class="form-control" name="name" placeholder="Tên sản phẩm"
              value="<%= typeof product !== 'undefined' ? product.name : '' %>" required />
          </div>
          <div class="col">
            <label for="price" class="form-label">Giá bán</label>
            <input type="number" class="form-control" name="price" placeholder="Giá bán"
              value="<%= typeof product !== 'undefined' ? product.price : '' %>" required />
          </div>
        </div>
        <div class="row mb-3">
          <div class="col">
            <label for="desc" class="form-label">Mô tả sản phẩm</label>
            <textarea class="form-control" name="desc" rows="5"></textarea>
          </div>
        </div>
        <div class="row mb-3">
          <div class="col">
            <label for="collection" class="form-label">Bộ sưu tập</label>
            <select id="collection" class="form-select" name="collection">
              <option value="">Chọn bộ sưu tập</option>
            </select>
          </div>
          <div class="col">
            <label for="category" class="form-label">Danh mục</label>
            <select id="category" class="form-select" name="category">
              <option value="">Chọn danh mục</option>
            </select>
          </div>
        </div>
        <div class="row mb-3">
          <div class="col">
            <label for="thumbnail" class="form-label">Upload Thumbnail</label>
            <input type="file" class="form-control" id="thumbnail" name="thumbnail" onchange="previewThumbnail()" />
          </div>
          <div class="col">
            <div id="ThumbnailPreview">
            </div>
          </div>
        </div>
        <div class="row mb-3">
          <div class="col">
            <label for="images" class="form-label">Upload ảnh sản phẩm</label>
            <input type="file" class="form-control" id="images" name="images[]" multiple onchange="previewImages()" />
          </div>
          <div class="col">
            <div id="imagePreview" style="display: flex; flex-wrap: wrap; gap: 10px;"></div>
          </div>
        </div>
        <div class="d-flex justify-content-end">
          <button type="submit" class="btn btn-primary">
            Lưu sản phẩm
          </button>
        </div>
      </form>
    </div>
  </div>
</main>

<script>
  document.addEventListener("DOMContentLoaded", async function () {
    const form = document.getElementById("form-add-product");
    const collectionSelect = document.getElementById("collection");
    const categorySelect = document.getElementById("category");
    const imagePreview = document.getElementById("imagePreview");
    const thumbnailPreview = document.getElementById("ThumbnailPreview");

    const productId = "<%= typeof product !== 'undefined' ? product._id : '' %>";
    const isEditing = productId !== "";
    const selectedCategory = "<%= typeof product !== 'undefined' ? product.categories._id : '' %>";
    const selectedCollection = "<%= typeof product !== 'undefined' && product.categories ? product.categories.collection_id : '' %>";

    // Lấy danh sách bộ sưu tập
    fetch("/api/collections")
      .then(res => res.json())
      .then(collections => {
        collections.forEach(collection => {
          const option = document.createElement("option");
          option.value = collection._id;
          option.text = collection.name;
          if (collection._id === selectedCollection) {
            option.selected = true;
            fetchCategories(collection._id);
          }
          collectionSelect.appendChild(option);
        });
      });

    // Cập nhật danh mục theo bộ sưu tập
    collectionSelect.addEventListener("change", function () {
      fetchCategories(this.value);
    });

    function fetchCategories(collectionId) {
      categorySelect.innerHTML = '<option value="">Chọn danh mục</option>';
      fetch(`/api/categories?collectionId=${collectionId}`)
        .then(res => res.json())
        .then(categories => {
          categories.forEach(category => {
            const option = document.createElement("option");
            option.value = category._id;
            option.text = category.name;
            if (category._id === selectedCategory) option.selected = true;
            categorySelect.appendChild(option);
          });
        });
    }

    // Xử lý form submit
    form.addEventListener("submit", async function (e) {
      e.preventDefault();

      const formData = new FormData(form);
      const hasNewThumbnail = document.getElementById("thumbnail").files.length > 0;
      const hasNewImages = Array.from(document.getElementById("images").files).some(file => file.size > 0);

      try {
        const productData = {
          name: formData.get("name"),
          price: formData.get("price"),
          description: formData.get("desc"),
          categories: formData.get("category"),
        };

        // Gửi dữ liệu sản phẩm
        const productResponse = await fetch(
          isEditing ? `/api/product/${productId}` : "/api/product",
          {
            method: isEditing ? "PUT" : "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(productData),
          }
        );

        if (!productResponse.ok) throw new Error("Lỗi khi lưu sản phẩm.");
        const savedProduct = await productResponse.json();

        // Upload thumbnail
        if (hasNewThumbnail) {
          const thumbnailFormData = new FormData();
          thumbnailFormData.append("thumbnail", formData.get("thumbnail"));

          const thumbnailResponse = await fetch(
            `http://localhost:3002/api/products/${savedProduct._id}`,
            { method: "PUT", body: thumbnailFormData }
          );

          if (!thumbnailResponse.ok) throw new Error("Lỗi khi tải lên thumbnail.");
        }

        // Upload ảnh sản phẩm
        if (hasNewImages) {
          const imageFormData = new FormData();
          Array.from(formData.getAll("images[]")).forEach(file => imageFormData.append("images", file));
          imageFormData.append("product_id", savedProduct._id);

          const imageResponse = await fetch(`http://localhost:3002/api/imageProduct/`, { method: "POST", body: imageFormData });

          if (!imageResponse.ok) throw new Error("Lỗi khi tải lên ảnh sản phẩm.");
        }

        alert("Lưu sản phẩm thành công!");
        window.location.href = "/admin/products";

      } catch (error) {
        console.error(error);
        alert("Lỗi sản phẩm.");
      }
    });

    // Xem trước thumbnail
    function previewThumbnail() {
      thumbnailPreview.innerHTML = "";
      const file = document.getElementById("thumbnail").files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
          const image = document.createElement("img");
          image.src = e.target.result;
          image.style.maxWidth = "100px";
          thumbnailPreview.appendChild(image);
        };
        reader.readAsDataURL(file);
      }
    }

    // Xem trước ảnh sản phẩm
    function previewImages() {
      imagePreview.innerHTML = "";
      const files = document.getElementById("images").files;
      Array.from(files).forEach(file => {
        const reader = new FileReader();
        reader.onload = function (e) {
          displayImage(e.target.result);
        };
        reader.readAsDataURL(file);
      });
    }

    // Hiển thị ảnh trong phần preview
    function displayImage(imageUrl) {
      const imgContainer = document.createElement("div");
      imgContainer.style.position = "relative";
      imgContainer.style.display = "inline-block";
      imgContainer.style.margin = "5px";

      const imgElement = document.createElement("img");
      imgElement.src = imageUrl;
      imgElement.style.maxWidth = "100px";
      imgElement.style.maxHeight = "100px";

      const deleteButton = document.createElement("button");
      deleteButton.textContent = "x";
      deleteButton.classList.add("btn", "btn-danger", "btn-sm");
      deleteButton.style.position = "absolute";
      deleteButton.style.top = "0";
      deleteButton.style.right = "0";
      deleteButton.style.lineHeight = "0.8";

      deleteButton.onclick = function () {
        imgContainer.remove();
      };

      imgContainer.appendChild(imgElement);
      imgContainer.appendChild(deleteButton);
      imagePreview.appendChild(imgContainer);
    }

    window.previewThumbnail = previewThumbnail;
    window.previewImages = previewImages;
  });
</script>
