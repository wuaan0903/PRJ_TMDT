<%- layout('../layouts/index') %>

<main id="view-panel">
  <div class="bg-white border rounded-4">
    <div>
      <div class="p-3 border-bottom d-flex justify-content-between">
        <h3 class="m-0 d-flex align-items-center fs-4">Danh sách sản phẩm</h3>
        <a class="btn btn-success m-2" href="products/add">Thêm sản phẩm</a>
      </div>
    </div>
    <div class="table-data">
      <div class="order">
        <table class="myTable">
          <thead>
            <tr>
              <th>Hình ảnh</th>
              <th>Sản phẩm</th>
              <th>Bộ sưu tập</th>
              <th>Danh mục</th>
              <th>Đơn giá</th>
              <th>Trạng thái</th>
              <th>Sửa</th>
              <th>Xóa</th>
            </tr>
          </thead>
          <tbody class="tbody active" id="product-table-body">
            <!-- Product rows will be dynamically inserted here -->
          </tbody>
        </table>
      </div>
    </div>
  </div>
</main>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const productTableBody = document.getElementById("product-table-body");

    const fetchProducts = async () => {
      try {
        const response = await fetch("/api/admin/products");
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        let products = await response.json();
        products = await Promise.all(
          products.map(async (product) => {
            try {
              const categoryName = product.categories.name;
              const collectionResponse = await fetch(`/api/collection/${product.categories.collection_id}`);
              const collectionData = await collectionResponse.json();
              return { ...product, collectionName: collectionData.name, categoryName };
            } catch (error) {
              console.error("Error fetching collection or category:", error);
              return { ...product, collectionName: "Unknown Collection", categoryName: "Unknown Category" };
            }
          })
        );
        renderProducts(products);
      } catch (error) {
        console.error("Error fetching products:", error);
        productTableBody.innerHTML = `<tr><td colspan="8">Failed to load products. Please try again.</td></tr>`;
      }
    };

    const renderProducts = (products) => {
      let tableRows = "";
      products.forEach((product) => {
        tableRows += `
          <tr>
            <td><img src="http://localhost:3002/api/products/thumbnail/${product.thumbnail}"></td>
            <td style="width: 40%;">${product.name}</td>
            <td>${product.collectionName}</td>
            <td>${product.categoryName}</td>
            <td>${product.price} ₫</td>
            <td>
              <label class="switch">
                <input type="checkbox" class="status-toggle" data-id="${product._id}" ${product.status ? "checked" : ""}>
                <span class="slider"></span>
              </label>
            </td>
            <td><a href="/admin/products/edit/${product._id}"><span class="btn btn-primary">Sửa</span></a></td>
            <td>
              <button type="button" class="btn btn-danger" onclick="confirmDelete('${product._id}')">Xóa</button>
            </td>
          </tr>
        `;
      });
      productTableBody.innerHTML = tableRows;
      document.querySelectorAll(".status-toggle").forEach((toggle) => {
        toggle.addEventListener("change", handleStatusChange);
      });
    };

    const handleStatusChange = async (event) => {
      const checkbox = event.target;
      const productId = checkbox.dataset.id;
      const newStatus = checkbox.checked;
      try {
        const response = await fetch(`/api/product/${productId}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ status: newStatus }),
        });
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        console.log(`Product ID ${productId} status updated to ${newStatus}`);
      } catch (error) {
        console.error("Error updating product status:", error);
        checkbox.checked = !newStatus;
      }
    };

    fetchProducts();

    window.confirmDelete = async (id) => {
      Swal.fire({
        title: "Bạn có chắc chắn muốn xóa sản phẩm này?",
        text: "Hành động này không thể hoàn tác!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "Xóa",
        cancelButtonText: "Hủy",
      }).then(async (result) => {
        if (result.isConfirmed) {
          try {
            const response = await fetch(`/api/product/${id}`, {
              method: "DELETE",
              headers: { "Content-Type": "application/json" },
            });
            if (response.ok) {
              Swal.fire("Đã xóa!", "Sản phẩm đã bị xóa thành công.", "success");
              fetchProducts();
            } else {
              Swal.fire("Lỗi!", "Không thể xóa sản phẩm.", "error");
            }
          } catch (error) {
            console.error("Error deleting product:", error);
            Swal.fire("Lỗi!", "Đã xảy ra lỗi khi xóa sản phẩm.", "error");
          }
        }
      });
    };
  });
</script>
