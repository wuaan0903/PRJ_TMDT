<%- layout('../layouts/index') %>

<main id="view-panel">
  <div class="d-flex justify-content-between align-items-center mb-4" bis_skin_checked="1">
    <!-- Tìm kiếm đơn hàng -->
      <div class="input-group" style="width: 40%;">
        <span class="input-group-text" style="border-radius: 24px 0 0 24px; background: white; border-right: none;">
            <i class="bx bx-search-alt-2"></i>
        </span>
        <input type="text" id="searchOrderInput" class="form-control" placeholder="Tìm kiếm sản phẩm..." style="
            font-size: 16px;
            font-weight: 600;
            letter-spacing: -1px;
            border-radius: 0 24px 24px 0;
            line-height: 2;
            border-left: none;
            outline: none;
            box-shadow: none;
        ">
    </div>

    <div class="d-flex" bis_skin_checked="1">
      <!-- Dropdown Bộ sưu tập -->
      <select id="filterCollection" class="form-select rounded-pill fw-medium letter-spacing py-2 px-3" style="width: 200px; margin-right: 10px;">
          <option value="all">Tất cả Bộ sưu tập</option>
      </select>
  
      <!-- Dropdown Danh mục -->
      <select id="filterCategory" class="form-select rounded-pill fw-medium letter-spacing py-2 px-3" style="width: 250px;">
          <option value="all">Tất cả Danh mục</option>
      </select>
    </div>

</div>

  <div class="bg-white border rounded-4">
    <div>
      <div class="p-3 border-bottom d-flex justify-content-between">
        <h3 class="m-0 d-flex align-items-center fs-4">Danh sách sản phẩm</h3>
        <a class="btn btn-success m-2" href="products/add">Thêm sản phẩm</a>
      </div>
    </div>
    <div class="table-data">
      <div class="order">
        <table class="myTable">
          <thead>
            <tr>
              <th>Hình ảnh</th>
              <th>Sản phẩm</th>
              <th>Bộ sưu tập</th>
              <th>Danh mục</th>
              <th>Đơn giá</th>
              <th>Trạng thái</th>
              <th>Sửa</th>
              <th>Xóa</th>
            </tr>
          </thead>
          <tbody class="tbody active" id="product-table-body">
            <!-- Product rows will be dynamically inserted here -->
          </tbody>
        </table>
      </div>
    </div>
  </div>
</main>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const productTableBody = document.getElementById("product-table-body");
    const searchInput = document.getElementById("searchOrderInput");
    const filterCollection = document.getElementById("filterCollection");
    const filterCategory = document.getElementById("filterCategory");

    let allProducts = []; // Lưu trữ tất cả sản phẩm để tìm kiếm và lọc

    // Hàm lấy danh sách bộ sưu tập từ API
    const fetchCollections = async () => {
      try {
          const response = await fetch("/api/collections");
          if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
          }
          const collections = await response.json();

          // Thêm các tùy chọn vào dropdown Bộ sưu tập
          collections.forEach((collection) => {
              const option = document.createElement("option");
              option.value = collection._id; // Sử dụng ID của bộ sưu tập
              option.textContent = collection.name;
              filterCollection.appendChild(option);
          });
      } catch (error) {
          console.error("Error fetching collections:", error);
      }
  };
  // Hàm lấy danh sách danh mục theo bộ sưu tập từ API
  const fetchCategoriesByCollection = async (collectionId) => {
    try {
        const response = await fetch(`/api/categories?collectionId=${collectionId}`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const categories = await response.json();

        // Xóa các tùy chọn cũ trong dropdown Danh mục
        filterCategory.innerHTML = '<option value="all">Tất cả Danh mục</option>';

        // Thêm các tùy chọn mới vào dropdown Danh mục
        categories.forEach((category) => {
            const option = document.createElement("option");
            option.value = category._id; // Sử dụng ID của danh mục
            option.textContent = category.name;
            filterCategory.appendChild(option);
        });
    } catch (error) {
        console.error("Error fetching categories:", error);
    }
};
// Lắng nghe sự kiện thay đổi trên dropdown Bộ sưu tập
filterCollection.addEventListener("change", (event) => {
  const selectedCollectionId = event.target.value;

  if (selectedCollectionId === "all") {
      // Nếu chọn "Tất cả Bộ sưu tập", hiển thị tất cả danh mục
      filterCategory.innerHTML = '<option value="all">Tất cả Danh mục</option>';
  } else {
      // Lấy danh sách danh mục theo bộ sưu tập đã chọn
      fetchCategoriesByCollection(selectedCollectionId);
  }
});

// Gọi hàm để lấy danh sách bộ sưu tập ban đầu
fetchCollections();

    // Function to fetch product data from API
    const fetchProducts = async () => {
      try {
        const response = await fetch("/api/admin/products");
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        let products = await response.json();

        // Fetch collection and category names for each product
        products = await Promise.all(
          products.map(async (product) => {
            try {
              // const collectionResponse = await fetch(`/api/collection/${product.collection}`);
              // const collectionData = await collectionResponse.json();
              const test = product.categories;
              const categoryResponse = await fetch(
                `/api/category/${product.categories}`
              );
              const categoryName = product.categories.name;

              const collectionResponse = await fetch(
                `/api/collection/${product.categories.collection_id}`
              );
              const collectionData = await collectionResponse.json();
              return {
                ...product,
                collectionName: collectionData.name,
                categoryName: categoryName,
              };
            } catch (error) {
              console.error("Error fetching collection or category:", error);
              return {
                ...product,
                collectionName: "Unknown Collection",
                categoryName: "Unknown Category",
              };
            }
          })
        );
        allProducts = products; // Save all products for search and filter

        renderProducts(products);
      } catch (error) {
        console.error("Error fetching products:", error);
        productTableBody.innerHTML = `<tr><td colspan="8">Failed to load products. Please try again.</td></tr>`;
      }
    };

    // Function to render products to the table
    const renderProducts = (products) => {
      let tableRows = "";
      products.forEach((product) => {
        tableRows += `
                <tr>
                    <td><img src="http://localhost:3002/api/products/thumbnail/${
                      product.thumbnail
                    }"></td>
                    <td style="width: 40%;">${product.name}</td>
                    <td>${product.collectionName}</td>
                    <td>${product.categoryName}</td>
                    <td>${product.price} ₫</td>
                    <td>
                        <label class="switch">
                            <input type="checkbox" class="status-toggle" data-id="${
                              product._id
                            }" ${product.status ? "checked" : ""}  ${
          product.status ? "checked" : ""
        }>
                            <span class="slider"></span>
                        </label>
                    </td>
                    <td><a href="/admin/products/edit/${
                      product._id
                    }"><span class="btn btn-primary">Sửa</span></a></td>
                    <td>
                        <button type="button" class="btn btn-danger" onclick="confirmDelete('${
                          product._id
                        }')">Xóa</button>
                    </td>   
                </tr>
                `;
      });
      productTableBody.innerHTML = tableRows;

      // Add event listeners to status toggle after rendering products
      const statusToggles = document.querySelectorAll(".status-toggle");
      statusToggles.forEach((toggle) => {
        toggle.addEventListener("change", handleStatusChange);
      });
    };


      // Hàm tìm kiếm sản phẩm theo tên
      const searchProducts = (query) => {
        return allProducts.filter((product) =>
            product.name.toLowerCase().includes(query.toLowerCase())
        );
    };

    // Hàm lọc sản phẩm theo bộ sưu tập
    const filterByCollection = (collection) => {
        if (collection === "all") return allProducts;
        return allProducts.filter((product) => product.collectionName === collection);
    };

    // Hàm lọc sản phẩm theo danh mục
    const filterByCategory = (category) => {
        if (category === "all") return allProducts;
        return allProducts.filter((product) => product.categoryName === category);
    };

// Hàm kết hợp tìm kiếm và lọc
const filterAndSearchProducts = () => {
  const searchQuery = searchInput.value.trim().toLowerCase();
  const selectedCollection = filterCollection.value;
  const selectedCategory = filterCategory.value;
  const selectedCollection1 = filterCollection.options[filterCollection.selectedIndex].text;
  const selectedCategory1 = filterCategory.options[filterCategory.selectedIndex].text;
  

  let filteredProducts = allProducts;

  // Lọc theo bộ sưu tập
  if (selectedCollection !== "all") {
      filteredProducts = filteredProducts.filter(
          (product) => product.collectionName === selectedCollection1
      );
  }

  // Lọc theo danh mục
  if (selectedCategory !== "all") {
      filteredProducts = filteredProducts.filter(
          (product) => product.categoryName === selectedCategory1
      );
  }

  // Tìm kiếm theo tên
  if (searchQuery) {
      filteredProducts = filteredProducts.filter((product) =>
          product.name.toLowerCase().includes(searchQuery)
      );
  }

  renderProducts(filteredProducts); // Hiển thị sản phẩm đã lọc và tìm kiếm
};


      // Lắng nghe sự kiện tìm kiếm
      searchInput.addEventListener("input", filterAndSearchProducts);

// Lắng nghe sự kiện thay đổi bộ sưu tập
filterCollection.addEventListener("change", filterAndSearchProducts);

// Lắng nghe sự kiện thay đổi danh mục
filterCategory.addEventListener("change", filterAndSearchProducts);

    const handleStatusChange = async (event) => {
      const checkbox = event.target;
      const productId = checkbox.dataset.id;
      const newStatus = checkbox.checked;

      try {
        const response = await fetch(`/api/product/${productId}`, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ status: newStatus }),
        });
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        console.log(`Product ID ${productId} status updated to ${newStatus}`);
        // Optionally update the UI or refresh product table
        //fetchProducts(); // Refresh the table after the update
      } catch (error) {
        console.error("Error updating product status:", error);
        checkbox.checked = !newStatus; // Revert the checkbox in case of an error
      }
    };

    fetchProducts();

    window.confirmDelete = async (id) => {
      if (confirm("Bạn có chắc chắn muốn xóa sản phẩm này?")) {
        try {
          const response = await fetch(`/api/product/${id}`, {
            method: "DELETE",
            headers: {
              "Content-Type": "application/json",
            },
          });

          if (response.ok) {
            console.log(`Product ID ${id} was deleted successfully`);
            fetchProducts(); // Refresh the table after the delete
          } else {
            const errorData = await response.json();
            console.error("Error deleting product:", errorData);
            alert("Could not delete the product");
          }
        } catch (error) {
          console.error("Error deleting product:", error);
          alert("Could not delete the product");
        }
      }
    };
  });
</script>
