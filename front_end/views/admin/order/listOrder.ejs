<%- layout('../layouts/index') %>

<style>
    :root {
        --blue: #3C91E6;
    }

    tbody {
        font-weight: 500;
    }

    .modall {
        position: fixed;
        left: 0;
        top: 0;
        height: 100%;
        width: 100%;
        visibility: hidden;
        pointer-events: none;
        z-index: 1000;
        display: flex;
        justify-content: center;
        align-items: center;

    }

    .modall.active {

        visibility: visible;
        pointer-events: auto;
    }


    .overlay {
        transition: 0.4s;
        position: fixed;
        height: 100%;
        width: 100%;
        background: linear-gradient(269deg, #000000a1, #ffffff00);
        opacity: 0;
        pointer-events: none;
    }

    .modall.active .overlay {
        opacity: 1;
        pointer-events: auto;
    }

    .modal-box {
        position: fixed;
        left: 58%;
        top: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    max-width: none;
    width: 70%;
    max-height: 575px;
    overflow: auto;
    padding: 30px 20px;
    border-radius: 24px;
    background-color: #fff;
    opacity: 0;
    pointer-events: none;
    transition: all 0.4s ease;
    transform: translate(-50%, -50%) scale(0.8);
    }

    .modall.active .modal-box {
        opacity: 1;
    pointer-events: auto;
    top: 350px;
    }


    #content main .table-data .head h3.active a {
        color: #000;
    }

    .container {
        padding: 0;
        margin-top: 0;
        max-width: 100%;
    }

    .containerr .shopping-cart {
        padding: 0;
    }

    .containerr .shopping-cart table tr td {

        font-size: 18px;
        font-weight: 600;
        letter-spacing: -1px;
    }

    .containerr .shopping-cart table thead th {
        font-size: 18px;
        letter-spacing: -1px;
        white-space: nowrap;
    }

    .table-body {
        max-height: 313px;
        overflow: auto;
    }

    /* width */
    ::-webkit-scrollbar {
        width: 5px;
        height: 10px;
        transform: translateX(-10px);
    }

    /* Track */
    ::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    /* Handle */
    ::-webkit-scrollbar-thumb {
        background: rgb(182, 182, 182);
    }

    /* Handle on hover */
    ::-webkit-scrollbar-thumb:hover {
        background: rgb(112, 112, 112);
    }
     .loader {
        display: flex;
        justify-content: center;
        align-items: center;
         margin-top: 20px;
      }
    .loader i {
         font-size: 3em;
    }

     .status-dropdown {
        position: relative;
        display: inline-block;
    }

    .status-dropdown .status-btn {
        cursor: pointer;
        padding: 8px 12px;
        border-radius: 4px;
        display: inline-block;
        white-space: nowrap;
        position: relative; /* Add position relative to the button */
    }

    .status-dropdown .dropdown-content {
        display: none;
        position: absolute;
        background-color: #f9f9f9;
        min-width: 160px;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        z-index: 1;
        left: 0;
        top: 100%;
        border-radius: 4px;
        padding: 5px 0;
        white-space: nowrap;
    }

    .status-dropdown .dropdown-content a {
        color: black;
        padding: 8px 12px;
        text-decoration: none;
        display: block;
    }

    .status-dropdown .dropdown-content a:hover {
         background-color: #f1f1f1;
    }

    .status-dropdown.active .dropdown-content {
        display: block;
    }
</style>
<main>
    <div class="view-panell">
        <section class="modall view">
            <span class="overlay"></span>
            <div class="modal-box">
                <div id="orderDetailsContainer" style="width: 100%;">
                    <!-- N·ªôi dung chi ti·∫øt ƒë∆°n h√†ng s·∫Ω ƒë∆∞·ª£c th√™m v√†o ƒë√¢y -->
                </div>
            </div>
        </section>

        <div class="d-flex justify-content-between align-items-center mb-4">
            <!-- T√¨m ki·∫øm ƒë∆°n h√†ng -->
            <div class="input-group" style="width: 40%;">
                <input type="text" id="searchOrderInput" class="form-control" placeholder="T√¨m ki·∫øm theo m√£ ƒë∆°n h√†ng ho·∫∑c t√™n kh√°ch h√†ng"style="
                font-size: 16px;
                font-weight: 600;
                letter-spacing: -1px;
                border-radius: 24px;
                line-height: 2;
">
                
            </div>

            <div class="d-flex">
                <select id="filterDate" class="form-select rounded-pill fw-medium letter-spacing py-2 px-3" style="
                width: 200px;
                margin-right: 10px;
            ">
                    <option value="all">To√†n th·ªùi gian</option>
                    <option value="today">H√¥m nay</option>
                    <option value="week">Tu·∫ßn n√†y</option>
                    <option value="month">Th√°ng n√†y</option>
                </select>

                <select id="filterStatus" class="form-select rounded-pill fw-medium letter-spacing py-2 px-3" style="
                width: 250px;
            ">
                    <option value="all">T·∫•t c·∫£ ƒë∆°n h√†ng</option>
                    <option value="pending">Ch·ªù x√°c nh·∫≠n</option>
                    <option value="processing">ƒêang giao h√†ng</option>
                    <option value="completed">ƒê√£ giao h√†ng</option>
                    <option value="cancelled">ƒê√£ h·ªßy</option>
                </select>
            </div>

        </div>
        <div id="order-container">
            <div class="loader" style="display: flex; justify-content: center; align-items: center;"><i class="bx bx-loader-circle bx-spin bx-rotate-90"></i></div>
        </div>
    </div>
</main>

<script>
    const orderContainer = document.getElementById('order-container');

    const searchInput = document.getElementById('searchOrderInput');
    const searchButton = document.getElementById('searchOrderButton');
    const filterDate = document.getElementById('filterDate');
    const filterStatus = document.getElementById('filterStatus');
    const tableBody = document.getElementById('order-container');

    let allOrders = []; // L∆∞u tr·ªØ t·∫•t c·∫£ ƒë∆°n h√†ng ƒë·ªÉ l·ªçc v√† t√¨m ki·∫øm

    async function fetchOrders() {
        try {
            const response = await fetch('/api/orders');
            if (!response.ok) {
                orderContainer.innerHTML = '<p>Failed to load orders.</p>';
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            const orders = await response.json();
            allOrders = orders;
            orderContainer.innerHTML = '';
    
            // S·∫Øp x·∫øp danh s√°ch ƒë∆°n h√†ng theo ng√†y gi·∫£m d·∫ßn
            orders.sort((a, b) => new Date(b.date) - new Date(a.date));
    
            const tableDataDiv = document.createElement('div');
            tableDataDiv.classList.add('table-data');
            const orderDiv = document.createElement('div');
            orderDiv.classList.add('order');
            const table = document.createElement('table');
            table.classList.add('myTable');
    
            table.innerHTML = `
                <thead>
                    <tr>
                        <th>M√£ ƒêH</th>
                        <th>Ng√†y ƒë·∫∑t</th>
                        <th>Kh√°ch h√†ng</th>
                        <th>Tr·∫°ng th√°i ƒë∆°n h√†ng</th>
                        <th>Ph∆∞∆°ng th·ª©c thanh to√°n</th>
                        <th>Tr·∫°ng th√°i thanh to√°n</th>
                        <th>T·ªïng ti·ªÅn</th>
                        <th>Chi Ti·∫øt</th>
                    </tr>
                </thead>
                <tbody></tbody>
            `;
            const tbody = table.querySelector('tbody');
    
            for (const order of orders) {
                const user = await fetchUser(order.userId);
                const row = document.createElement('tr');
    
                const statusDropdown = `
                    <select class="form-select rounded-pill fw-medium letter-spacing py-2 px-3" id="orderStatusSelect" data-order-id="${order._id}">
                        <option value="pending" ${order.status === 'pending' ? 'selected' : ''}>üü° ƒêang ch·ªù x·ª≠ l√Ω</option>
                        <option value="processing" ${order.status === 'processing' ? 'selected' : ''}>üöö ƒêang giao h√†ng</option>
                        <option value="completed" ${order.status === 'completed' ? 'selected' : ''}>‚úÖ ƒê√£ giao h√†ng</option>
                        <option value="cancelled" ${order.status === 'cancelled' ? 'selected' : ''}>‚ùå ƒê√£ h·ªßy</option>
                    </select>
                `;
    
                row.innerHTML = `
                    <td>#${order._id}</td>
                    <td>${new Date(order.date).toLocaleString()}</td>
                    <td>${order.name || 'N/A'}</td>
                    <td>${statusDropdown}</td>
                    <td>${order.paymentMethod}</td>
                    <td>${order.paymentStatus ? 'ƒê√£ thanh to√°n' : 'Ch∆∞a thanh to√°n'}</td>
                    <td>${order.totalAmount.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}</td>
                    <td><span class="status edit" onclick="viewSp('${order._id}')">Xem</span></td>
                `;
                tbody.appendChild(row);
            }
    
            orderDiv.appendChild(table);
            tableDataDiv.appendChild(orderDiv);
            orderContainer.appendChild(tableDataDiv);
    
            attachStatusSelectListeners();
        } catch (error) {
            console.error('Error fetching or processing orders:', error);
            orderContainer.innerHTML = '<p>Error loading orders.</p>';
        }
    }

    // Hi·ªÉn th·ªã danh s√°ch ƒë∆°n h√†ng
    function renderOrders(orders) {
        const tableBody = document.querySelector('tbody');
        tableBody.innerHTML = '';

        if (orders.length === 0) {
            tableBody.innerHTML = '<tr><td colspan="8">Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o.</td></tr>';
            return;
        }

        orders.forEach(order => {
            const row = document.createElement('tr');
            const statusDropdown = `
            <select class="form-select rounded-pill fw-medium letter-spacing py-2 px-3" id="orderStatusSelect" data-order-id="${order._id}">
                <option value="pending" ${order.status === 'pending' ? 'selected' : ''}>üü° ƒêang ch·ªù x·ª≠ l√Ω</option>
                <option value="processing" ${order.status === 'processing' ? 'selected' : ''}>üöö ƒêang giao h√†ng</option>
                <option value="completed" ${order.status === 'completed' ? 'selected' : ''}>‚úÖ ƒê√£ giao h√†ng</option>
                <option value="cancelled" ${order.status === 'cancelled' ? 'selected' : ''}>‚ùå ƒê√£ h·ªßy</option>
            </select>
        `;

            row.innerHTML = `
                <td>#${order._id.slice(-6)}</td>
                <td>${new Date(order.date).toLocaleString('vi-VN')}</td>
                <td>${order.name || 'N/A'}</td>
                <td>${statusDropdown}</td>
                <td>${order.paymentMethod}</td>
                <td>${order.paymentStatus ? 'ƒê√£ thanh to√°n' : 'Ch∆∞a thanh to√°n'}</td>
                <td>${order.totalAmount.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}</td>
                <td><span class="status edit" onclick="viewSp('${order._id}')">Xem</span></td>
            `;

            tableBody.appendChild(row);
        });
    }

    // L·ªçc ƒë∆°n h√†ng theo ng√†y/tu·∫ßn/th√°ng
    function filterOrdersByDate(orders, filter) {
        const now = new Date();
        return orders.filter(order => {
            const orderDate = new Date(order.date);
            switch (filter) {
                case 'today':
                    return orderDate.toDateString() === now.toDateString();
                case 'week':
                    const startOfWeek = new Date(now.setDate(now.getDate() - now.getDay()));
                    const endOfWeek = new Date(startOfWeek);
                    endOfWeek.setDate(startOfWeek.getDate() + 6);
                    return orderDate >= startOfWeek && orderDate <= endOfWeek;
                case 'month':
                    return orderDate.getMonth() === now.getMonth() && orderDate.getFullYear() === now.getFullYear();
                default:
                    return true;
            }
        });
    }
    
        // L·ªçc ƒë∆°n h√†ng theo tr·∫°ng th√°i
        function filterOrdersByStatus(orders, status) {
            if (status === 'all') return orders;
            return orders.filter(order => order.status === status);
        }

        // T√¨m ki·∫øm ƒë∆°n h√†ng theo m√£ ho·∫∑c t√™n kh√°ch h√†ng
        function searchOrders(orders, query) {
            const lowerCaseQuery = query.toLowerCase();
            return orders.filter(order =>
                order._id.toLowerCase().includes(lowerCaseQuery) ||
                (order.name && order.name.toLowerCase().includes(lowerCaseQuery))
            );
        }



    // X·ª≠ l√Ω s·ª± ki·ªán l·ªçc theo ng√†y/tu·∫ßn/th√°ng
    filterDate.addEventListener('change', () => {
        const dateFilter = filterDate.value;
        const statusFilter = filterStatus.value;

        let filteredOrders = filterOrdersByDate(allOrders, dateFilter);
        filteredOrders = filterOrdersByStatus(filteredOrders, statusFilter);

        renderOrders(filteredOrders);
    });

    // X·ª≠ l√Ω s·ª± ki·ªán l·ªçc theo tr·∫°ng th√°i
    filterStatus.addEventListener('change', () => {
        const dateFilter = filterDate.value;
        const statusFilter = filterStatus.value;

        let filteredOrders = filterOrdersByDate(allOrders, dateFilter);
        filteredOrders = filterOrdersByStatus(filteredOrders, statusFilter);

        renderOrders(filteredOrders);
    });


    
    async function fetchUser(userId) {
        try {
            const response = await fetch(`/api/account/${userId}`);
             if (!response.ok) {
                 return {name: 'N/A'}
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            const user = await response.json();
            return user;
        } catch (error) {
             console.error('Error fetching user:', error);
            return { name: 'N/A' }
        }
    }
    function getStatusClass(status) {
        switch (status) {
            case 'pending':
                return 'delete'; // You can change 'delete' to an appropriate class
            case 'processing':
                return 'process';
            case 'completed':
                return 'complete';
            case 'cancelled':
                return 'cancelled';
            default:
                return '';
        }
    }
    function getStatusText(status) {
       switch (status) {
            case 'pending':
                return 'ƒêang ch·ªù x·ª≠ l√Ω';
            case 'processing':
                return 'ƒêang giao h√†ng';
            case 'completed':
                return 'ƒê√£ giao h√†ng';
            case 'cancelled':
                return 'ƒê√£ h·ªßy';
            default:
                return status;
        }
    }

    async function updateOrderStatus(orderId, newStatus) {
       try {
            const response = await fetch(`/api/orders/${orderId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ status: newStatus }),
            });
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
              fetchOrders();
             console.log(`Order ${orderId} status updated to ${newStatus}`);
         } catch (error) {
            console.error('Error updating order status:', error);
        }
    }
    function attachStatusSelectListeners() {
        // L·∫•y t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ <select> li√™n quan ƒë·∫øn tr·∫°ng th√°i ƒë∆°n h√†ng
        document.querySelectorAll('#orderStatusSelect').forEach(select => {
            select.addEventListener('change', async (event) => {
                const newStatus = event.target.value; // L·∫•y gi√° tr·ªã tr·∫°ng th√°i m·ªõi
                const orderId = event.target.getAttribute('data-order-id'); // L·∫•y ID ƒë∆°n h√†ng
    
                // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
                await updateOrderStatus(orderId, newStatus);
            });
        });
    }
    async function viewSp(orderId) {
        try {
            const response = await fetch(`/api/orders/${orderId}`);
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            const order = await response.json();
    
            // Fetch product details for each product in the order
            const productDetailsPromises = order.products.map(product => 
                fetch(`/api/product/${product.productId}`).then(res => res.json())
            );
            const productDetails = await Promise.all(productDetailsPromises);
    
            const orderDetailsContainer = document.getElementById('orderDetailsContainer');

            orderDetailsContainer.innerHTML = `
    <h2 class="mb-4">Chi ti·∫øt ƒë∆°n h√†ng #${order._id.slice(-2)}</h2>
    <div class="table-responsive">
        <table class="table table-bordered text-center align-middle">
            <thead class="table-dark">
                <tr>
                    <th>·∫¢nh</th>
                    <th>S·∫£n ph·∫©m</th>
                    <th>Size</th>
                    <th>S·ªë l∆∞·ª£ng</th>
                    <th>ƒê∆°n gi√°</th>
                    <th>Th√†nh ti·ªÅn</th>
                </tr>
            </thead>
            <tbody>
                ${order.products.map((product, index) => {
                    const productDetail = productDetails[index];
                    return `
                        <tr>
                            <td>
                                <img src="http://localhost:3002/api/products/thumbnail/${productDetail.thumbnail}" 
                                     alt="${productDetail.name}" 
                                     class="img-fluid rounded" 
                                     style="width: 80px; height: 100px; object-fit: cover;">
                            </td>
                            <td>${productDetail.name}</td>
                            <td>${product.size}</td>
                            <td>${product.quantity}</td>
                            <td>${productDetail.price.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}</td>
                            <td>${(productDetail.price * product.quantity).toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}</td>
                        </tr>
                    `;
                }).join('')}
            </tbody>
        </table>
    </div>
    <div class="">
        <h5 class="text-danger">Gi·∫£m gi√°: ${order.discount.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}</h5>
        <h5 class="text-success">T·ªïng ti·ªÅn: ${order.totalAmount.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}</h5>
    </div>
`;



            const modal = document.querySelector('.modall');
            modal.classList.add('active');
        } catch (error) {
            console.error('Error fetching order details:', error);
            alert('ƒê√£ x·∫£y ra l·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng.');
        }
    }

    const modals = document.querySelectorAll('.modall');
    modals.forEach(modal => {
        const overlay = modal.querySelector('.overlay');
        overlay.addEventListener('click', () => {
            modal.classList.remove('active');
        })
    });
     document.addEventListener('click', (event) => {
        if(!event.target.closest('.status-dropdown'))
        {
           document.querySelectorAll('.status-dropdown.active').forEach(dropdown => {
                dropdown.classList.remove('active');
           });
        }

     });

    fetchOrders();
</script>